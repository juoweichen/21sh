
/*
void execute_pipe_sequence(t_astnode *astree, int prevread, int prevwrite)
{
//for recursive
prevread = 0;
prevwrite = 0;

	int fd[2];
 	//pid_t pid;

	if (astree == NULL)
 		return ;
	if (pipe(fd) < 0)
	{
		perror("pipe");
		exit(1);
	}

	int pipewrite = fd[1];
    int piperead = fd[0];

	// if ((pid = fork()) < 0)
	// {
	// 	perror("fork");
	// 	exit(1);
	// }
	execute_command(astree->left, -1, pipewrite);
	astree = astree->right;
	while (astree != NULL && astree->type == NODE_PIPE_SEQUENCE)
	{
		close(pipewrite);
		if (pipe(fd) < 0)
		{
			perror("pipe in middle");
			exit(1);
		}
		pipewrite = fd[1];
		execute_command(astree->left, piperead, pipewrite);
		close(piperead);
        piperead = fd[0];
		astree = astree->right;
	}
	piperead = fd[0];
    close(pipewrite);

	execute_command(astree, piperead, -1);
	close(piperead);
}
*/
/*
void execute_pipe_sequence(t_astnode *astree, int prevread, int prevwrite)
{
//for recursive
prevread = 0;
prevwrite = 0;

	int fd[2];
 	pid_t pid;

	if (astree == NULL)
 		return ;
	if (pipe(fd) < 0)
	{
		perror("pipe");
		exit(1);
	}

	int pipewrite = fd[1];
    int piperead = fd[0];

	if ((pid = fork()) < 0)
	{
		perror("fork");
		exit(1);
	}

	if (pid == 0)
	{
		//first child process
		execute_command(astree->left, -1, pipewrite);
		exit(0);
	}
	else
	{
		
		//first parent process
		astree = astree->right;
		while (astree != NULL && astree->type == NODE_PIPE_SEQUENCE)
		{
			//disconnect old pipe and create new pipe
			close(pipewrite);
			if (pipe(fd) < 0)
			{
				perror("pipe in middle");
				exit(1);
			}
			pipewrite = fd[1];

			//fork next process
			if ((pid = fork()) < 0)
			{
				perror("fork");
				exit(1);
			}
			if (pid == 0)
			{
				execute_command(astree->left, piperead, pipewrite);
				exit(0);
			}
			else
			{
				astree = astree->right;
			}
		}
		piperead = fd[0];
		close(pipewrite);
		execute_command(astree, piperead, -1);
		close(piperead);
	}
}
*/